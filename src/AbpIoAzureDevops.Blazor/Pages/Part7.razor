@page "/part7"

<PartTemplate Title="@Constants.Part7.Title" PrevHref="@Constants.Part7.PrevHref" Href="@Constants.Part7.Href" NextHref="@Constants.Part7.NextHref" PageIdentifier="@Constants.Part7.PageIdentifier" >
    <Part>
      <p>1. When the Release pipeline has finished and the ApiDeployment succeeded, open a browser window and navigate to the URL of your Web App (You can find it in Azure)</p>
      <pre><code class="language-html">https://[YourAppName]api.azurewebsites.net</code></pre>
      <p>2. It's possible that you receive the error <em>HTTP Error 500.30 - ANCM In-Process Start Failure</em></p>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/HTTP_Error_500.30_ANCM_In_Process_Start_Failure.jpg" />
      </Figure>
      <p>3. Open the <em>Debug Console</em> in the <em>Kudu window</em> by navigating to [YourAppName]api.<b>scm</b>.azurewebsites.net</p>
      <pre><code class="language-html">https://[YourAppName]api.scm.azurewebsites.net</code></pre>
      <p>4. Check if [YourAppName].HttpApi.Host files have been deployed in the <em>home\site\wwwroot</em> folder</p>
      <pre><code class="language-html">dir</code></pre>
      <p>5. Check the dotnet version of the Azure Web App. Should be 3.1.x</p>
      <pre><code class="language-html">dotnet --version</code></pre>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/kudu_debug_console_check_dotnet_version.jpg" />
      </Figure>
      <p>6. To solve error <em>HTTP Error 500.30 - ANCM In-Process Start Failure</em> add <em>&lt;AspNetCoreHostingModel&gtOutOfProcess&lt;/AspNetCoreHostingModel&gt;</em> to the [YourAppName].HttpApi.Host.csproj file</p>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/add_AspNetCoreHostingModel_OutOfProcess_csproj.jpg" />
      </Figure>
      <p>7. Open a command prompt in the root folder of your project and Add, Commit and Push all your changes to your GitHub repository</p>
      <pre><code class="language-html">
git add .
git commit -m OutOfProcess
git push
      </code></pre>
      <p>8. Pushing changes to your GitHub repository triggers a <em>new Build</em> as <em>Continous Integration</em> is enabled in the Build pipeline</p>
      <p>9. When this new Build has finished, a new Release will start. Wait until the Release has finished and the Deployment Succeeded</p>
      <p>10. Navigate to the URL of the Web App. You probably see the error <em>An error occurred while starting the application.</em></p>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/an_error_when_starting_the_application.jpg" />
      </Figure>
      <p>11. Open the <em>Debug Console</em> in the <em>Kudu</em> window by navigating to [YourAppNameapi].<b>scm</b>.azurewebsites.net</p>
      <pre><code class="language-html">https://[YourAppName]api.scm.azurewebsites.net</code></pre>
      <p>12. Try to invoke an <em>error description</em> by entering the command below in the <em>home/site/wwwroot</em> folder of the <em>Debug Console</em></p>
      <pre><code class="language-html">dotnet [YourAppName].HttpApi.Host.dll</code></pre>
      <p>13. If you receive no Error description. Go to <em>Program.cs</em> in the <em>[YourAppName].HttpApi.Host</em> project and comment out the <em>if debug statements</em></p>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/comment_out_if_debug_statements_in_ProgramCs.jpg" />
      </Figure>
      <p>14. Add, Commit and Push all your changes to your GitHub repository</p>
       <pre><code class="language-html">
git add .
git commit -m CommentOutDebugStatements
git push
      </code></pre>
      <p>15. Wait until the new Build and new Release have finished and the Deployment has succeeded</p>
      <p>16. Navigate to the URL of the Web App. You should see the same error <em>An error occurred while starting the application.</em> again</p>
       <p>17. Open the <em>Debug Console</em> in the <em>Kudu</em> window by navigating to [YourAppNameapi].<b>scm</b>.azurewebsites.net</p>
      <pre><code class="language-html">https://[YourAppName]api.scm.azurewebsites.net</code></pre>
      <p>18. Enter the command below in the wwwroot folder of the <em>Debug Console</em> to start the application. Now you should see the detailed error description</p>
      <pre><code class="language-html">dotnet [YourAppName].HttpApi.Host.dll</code></pre>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/could_not_find_file_tempkey.rsa.jpg" />
      </Figure>
      <p>19. Add the section below to the <em>[YourAppName].HttpApi.Host.csproj</em> file to copy the <em>missing tempkey.rsa</em> file to the output directory </p>
      <pre><code class="language-html">
&lt;ItemGroup&gt
  &lt;None Update="tempkey.rsa"&gt
    &lt;CopyToOutputDirectory&gtPreserveNewest&lt;/CopyToOutputDirectory&gt
  &lt;/None&gt
&lt;/ItemGroup&gt
      </code></pre>
      <p>20. Add, Commit and Push all your changes to your GitHub repository</p>
      <pre><code class="language-html">
git add .
git commit -m CopyToOutputDirectory
git push
      </code></pre>
      <p>21. Wait until the new Build and Release have finished and the Deployment has succeeded</p>
      <p>22. Navigate to the URL of the Web App to see if the error is gone</p>
      <p>23. It's possible that you get another error: <em>This page isnâ€™t working</em></p>
      <p>24. Open the <em>Debug Console</em> in the <em>Kudu</em> window by navigating to <em>[YourAppNameapi].<b>scm</b>.azurewebsites.net</em></p>
      <pre><code class="language-html">https://[YourAppName]api.scm.azurewebsites.net</code></pre>
      <p>25. Enter the command below in the <em>wwwroot</em> folder of the <em>Debug Console</em> to get a more specific error description</p>
      <pre><code class="language-html">dotnet [YourAppName].HttpApi.Host.dll</code></pre>
      <p>26. Probably you receive the error description below</p>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/client_not_allowed_to_access_server.jpg" />
      </Figure>
      <p>27. Go to your <em>Azure Portal</em> and select your <em>[YourAppName]server</em></p>
      <p>28. Click on the <b>Firewalls and virtual networks</b> in the left menu</p>
      <p>29. Select <b>Yes</b> in the <em>Allow Azure services and resources to access this server</em> toggle</p>
      <p>30. Click the <b>Save</b> button. Click <b>OK</b> in the <em>Successfully updated server firewall rules</em> window. Close the window </p>
      <p>31. Navigate to the URL of the Web App and Refresh the page</p>
      <p>32. Your <em>[YourAppName].HttpApi.Host</em> project should now <b>be up and running</b> and the <em>Swagger</em> page is served by your Web App in Azure</p>
      <Figure Size="FigureSize.None">
        <FigureImage Source="images/swagger_page_served_by_web_app_on_azure.jpg" />
      </Figure>
    </Part>
</PartTemplate>